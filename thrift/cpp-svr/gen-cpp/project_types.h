/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef project_TYPES_H
#define project_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace OpenSourceProjects {

class Date;

class Project;

class CreateResult;

typedef struct _Date__isset {
  _Date__isset() : year(false), month(false), day(false) {}
  bool year :1;
  bool month :1;
  bool day :1;
} _Date__isset;

class Date : public virtual ::apache::thrift::TBase {
 public:

  Date(const Date&);
  Date& operator=(const Date&);
  Date() : year(0), month(0), day(0) {
  }

  virtual ~Date() throw();
  int16_t year;
  int16_t month;
  int16_t day;

  _Date__isset __isset;

  void __set_year(const int16_t val);

  void __set_month(const int16_t val);

  void __set_day(const int16_t val);

  bool operator == (const Date & rhs) const
  {
    if (!(year == rhs.year))
      return false;
    if (!(month == rhs.month))
      return false;
    if (!(day == rhs.day))
      return false;
    return true;
  }
  bool operator != (const Date &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Date & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Date &a, Date &b);

inline std::ostream& operator<<(std::ostream& out, const Date& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Project__isset {
  _Project__isset() : name(false), host(false), inception(false) {}
  bool name :1;
  bool host :1;
  bool inception :1;
} _Project__isset;

class Project : public virtual ::apache::thrift::TBase {
 public:

  Project(const Project&);
  Project& operator=(const Project&);
  Project() : name(), host() {
  }

  virtual ~Project() throw();
  std::string name;
  std::string host;
  Date inception;

  _Project__isset __isset;

  void __set_name(const std::string& val);

  void __set_host(const std::string& val);

  void __set_inception(const Date& val);

  bool operator == (const Project & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(inception == rhs.inception))
      return false;
    return true;
  }
  bool operator != (const Project &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Project & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Project &a, Project &b);

inline std::ostream& operator<<(std::ostream& out, const Project& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CreateResult__isset {
  _CreateResult__isset() : code(false), message(false) {}
  bool code :1;
  bool message :1;
} _CreateResult__isset;

class CreateResult : public virtual ::apache::thrift::TBase {
 public:

  CreateResult(const CreateResult&);
  CreateResult& operator=(const CreateResult&);
  CreateResult() : code(0), message() {
  }

  virtual ~CreateResult() throw();
  int16_t code;
  std::string message;

  _CreateResult__isset __isset;

  void __set_code(const int16_t val);

  void __set_message(const std::string& val);

  bool operator == (const CreateResult & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const CreateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateResult &a, CreateResult &b);

inline std::ostream& operator<<(std::ostream& out, const CreateResult& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
