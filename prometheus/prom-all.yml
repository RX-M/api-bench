---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: node-exporter
  labels:
    app: node-exporter
spec:
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      hostNetwork: true
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        value: ""
        effect: "NoSchedule"
      containers:
      - name: node-exporter
        image: prom/node-exporter
        volumeMounts:
          - name: rootfs
            mountPath: /rootfs
            readOnly: false
          - name: sys
            mountPath: /host/sys
            readOnly: false
          - name: proc
            mountPath: /host/proc
            readOnly: false
        ports:
          - name: node-exp-port
            containerPort: 9100
            protocol: TCP
        args:
          - collector.procfs /host/proc
          - collector.sysfs /host/sys
          - collector.filesystem.ignored-mount-points "^/(sys|proc|dev|host|etc)($|/)"
      volumes:
      - name: rootfs
        hostPath:
          path: /
      - name: sys
        hostPath:
          path: /sys
      - name: proc
        hostPath:
          path: /proc
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: cadvisor
  labels:
    app: cadvisor
spec:
  template:
    metadata:
      labels:
        app: cadvisor
    spec:
      hostPID: true
      hostIPC: true
      hostNetwork: true
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        value: ""
        effect: "NoSchedule"
      containers:
      - name: cadvisor
        image: google/cadvisor
        securityContext:
          privileged: true
        volumeMounts:
          - name: rootfs
            mountPath: /rootfs
            readOnly: true
          - name: var-run
            mountPath: /var/run
            readOnly: false
          - name: sys
            mountPath: /sys
            readOnly: true
          - name: docker
            mountPath: /var/lib/docker
            readOnly: true
        ports:
          - name: http
            containerPort: 8089
            protocol: TCP
        args:
          - --storage_duration=5m0s
          - --housekeeping_interval=1s
          - --port=8089
      volumes:
      - name: rootfs
        hostPath:
          path: /
      - name: var-run
        hostPath:
          path: /var/run
      - name: sys
        hostPath:
          path: /sys
      - name: docker
        hostPath:
          path: /var/lib/docker
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: prom-svc
  name: prom-svc
spec:
  type: LoadBalancer
  selector:
    app: prometheus
  ports:
    - name: grafana-port
      protocol: TCP
      port: 80
      targetPort: 3000
    - name: prom-port
      protocol: TCP
      port: 81
      targetPort: 9090
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    name: prom-dep
  name: prom-dep
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      nodeSelector:
        node-role.kubernetes.io/master:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        value: ""
        effect: "NoSchedule"
      containers:
      - image: quay.io/prometheus/prometheus:v1.6.2
        name: prometheus
        command:
        - "/bin/prometheus"
        args:
        - "-config.file=/etc/prometheus/prometheus.yml"
        - "-storage.local.path=/prometheus"
        - "-storage.local.retention=12h"
        ports:
        - containerPort: 9090
          protocol: TCP
        volumeMounts:
        - mountPath: "/prometheus"
          name: data
        - mountPath: "/etc/prometheus"
          name: config-volume
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 2500Mi
      - image: grafana/grafana
        name: grafana
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "nevermind"
        volumeMounts:
        - mountPath: "/var/lib/grafana"
          name: awsvol
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          name: prom-config
        name: config-volume
      - name: awsvol
        awsElasticBlockStore:
          volumeID: vol-066c9034983ed7fdd
          fsType: ext4
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prom-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s
      scrape_timeout: 5s
    scrape_configs:
    - job_name: 'k8s-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    - job_name: 'k8s-nodes'
      scheme: http
      kubernetes_sd_configs:
      - role: node
    - job_name: 'k8s-svc-endpts'
      scheme: http
      kubernetes_sd_configs:
      - role: endpoints
    - job_name: 'k8s-pods'
      scheme: http
      kubernetes_sd_configs:
      - role: pod
